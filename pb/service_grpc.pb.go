// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: pb/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserDashboardClient is the client API for UserDashboard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDashboardClient interface {
	MyMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Home(ctx context.Context, in *HomeRequest, opts ...grpc.CallOption) (*HomeResponse, error)
	AddAddress(ctx context.Context, in *AddAddressRequest, opts ...grpc.CallOption) (*AddAddressResponse, error)
	UserDetails(ctx context.Context, in *UserDetailsRequset, opts ...grpc.CallOption) (*UserDetailsResponse, error)
	Apparels(ctx context.Context, in *ApparelsRequest, opts ...grpc.CallOption) (*ApparelsResponse, error)
	ApparelDetails(ctx context.Context, in *ApparelDetailsRequest, opts ...grpc.CallOption) (*ApparelDetailsResponse, error)
	SearchApparels(ctx context.Context, in *SearchApparelsRequest, opts ...grpc.CallOption) (*SearchApparelsResponse, error)
	AddToCart(ctx context.Context, in *AddToCartRequest, opts ...grpc.CallOption) (*AddToCartResponse, error)
	AddToWishList(ctx context.Context, in *AddToWishListRequest, opts ...grpc.CallOption) (*AddToWishListResponse, error)
	Cart(ctx context.Context, in *CartRequest, opts ...grpc.CallOption) (*CartResponse, error)
	CartList(ctx context.Context, in *CartListRequest, opts ...grpc.CallOption) (*CartListResponse, error)
	RemoveFromCart(ctx context.Context, in *RemoveFromCartRequest, opts ...grpc.CallOption) (*RemoveFromCartResponse, error)
	RemoveFromWishlist(ctx context.Context, in *RemoveFromWishlistRequest, opts ...grpc.CallOption) (*RemoveFromWishlistResponse, error)
	Wishlist(ctx context.Context, in *WishlistRequest, opts ...grpc.CallOption) (*WishlistResponse, error)
	AvailableCoupons(ctx context.Context, in *AvailableCouponsRequest, opts ...grpc.CallOption) (*AvailableCouponsResponse, error)
	ApplyCoupon(ctx context.Context, in *ApplyCouponRequest, opts ...grpc.CallOption) (*ApplyCouponResponse, error)
	OfferCheck(ctx context.Context, in *OfferCheckRequest, opts ...grpc.CallOption) (*OfferCheckResponse, error)
}

type userDashboardClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDashboardClient(cc grpc.ClientConnInterface) UserDashboardClient {
	return &userDashboardClient{cc}
}

func (c *userDashboardClient) MyMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/MyMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) Home(ctx context.Context, in *HomeRequest, opts ...grpc.CallOption) (*HomeResponse, error) {
	out := new(HomeResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/Home", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) AddAddress(ctx context.Context, in *AddAddressRequest, opts ...grpc.CallOption) (*AddAddressResponse, error) {
	out := new(AddAddressResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/AddAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) UserDetails(ctx context.Context, in *UserDetailsRequset, opts ...grpc.CallOption) (*UserDetailsResponse, error) {
	out := new(UserDetailsResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/UserDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) Apparels(ctx context.Context, in *ApparelsRequest, opts ...grpc.CallOption) (*ApparelsResponse, error) {
	out := new(ApparelsResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/Apparels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) ApparelDetails(ctx context.Context, in *ApparelDetailsRequest, opts ...grpc.CallOption) (*ApparelDetailsResponse, error) {
	out := new(ApparelDetailsResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/ApparelDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) SearchApparels(ctx context.Context, in *SearchApparelsRequest, opts ...grpc.CallOption) (*SearchApparelsResponse, error) {
	out := new(SearchApparelsResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/SearchApparels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) AddToCart(ctx context.Context, in *AddToCartRequest, opts ...grpc.CallOption) (*AddToCartResponse, error) {
	out := new(AddToCartResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/AddToCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) AddToWishList(ctx context.Context, in *AddToWishListRequest, opts ...grpc.CallOption) (*AddToWishListResponse, error) {
	out := new(AddToWishListResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/AddToWishList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) Cart(ctx context.Context, in *CartRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/Cart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) CartList(ctx context.Context, in *CartListRequest, opts ...grpc.CallOption) (*CartListResponse, error) {
	out := new(CartListResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/CartList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) RemoveFromCart(ctx context.Context, in *RemoveFromCartRequest, opts ...grpc.CallOption) (*RemoveFromCartResponse, error) {
	out := new(RemoveFromCartResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/RemoveFromCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) RemoveFromWishlist(ctx context.Context, in *RemoveFromWishlistRequest, opts ...grpc.CallOption) (*RemoveFromWishlistResponse, error) {
	out := new(RemoveFromWishlistResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/RemoveFromWishlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) Wishlist(ctx context.Context, in *WishlistRequest, opts ...grpc.CallOption) (*WishlistResponse, error) {
	out := new(WishlistResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/Wishlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) AvailableCoupons(ctx context.Context, in *AvailableCouponsRequest, opts ...grpc.CallOption) (*AvailableCouponsResponse, error) {
	out := new(AvailableCouponsResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/AvailableCoupons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) ApplyCoupon(ctx context.Context, in *ApplyCouponRequest, opts ...grpc.CallOption) (*ApplyCouponResponse, error) {
	out := new(ApplyCouponResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/ApplyCoupon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) OfferCheck(ctx context.Context, in *OfferCheckRequest, opts ...grpc.CallOption) (*OfferCheckResponse, error) {
	out := new(OfferCheckResponse)
	err := c.cc.Invoke(ctx, "/pb.UserDashboard/OfferCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDashboardServer is the server API for UserDashboard service.
// All implementations must embed UnimplementedUserDashboardServer
// for forward compatibility
type UserDashboardServer interface {
	MyMethod(context.Context, *Request) (*Response, error)
	Home(context.Context, *HomeRequest) (*HomeResponse, error)
	AddAddress(context.Context, *AddAddressRequest) (*AddAddressResponse, error)
	UserDetails(context.Context, *UserDetailsRequset) (*UserDetailsResponse, error)
	Apparels(context.Context, *ApparelsRequest) (*ApparelsResponse, error)
	ApparelDetails(context.Context, *ApparelDetailsRequest) (*ApparelDetailsResponse, error)
	SearchApparels(context.Context, *SearchApparelsRequest) (*SearchApparelsResponse, error)
	AddToCart(context.Context, *AddToCartRequest) (*AddToCartResponse, error)
	AddToWishList(context.Context, *AddToWishListRequest) (*AddToWishListResponse, error)
	Cart(context.Context, *CartRequest) (*CartResponse, error)
	CartList(context.Context, *CartListRequest) (*CartListResponse, error)
	RemoveFromCart(context.Context, *RemoveFromCartRequest) (*RemoveFromCartResponse, error)
	RemoveFromWishlist(context.Context, *RemoveFromWishlistRequest) (*RemoveFromWishlistResponse, error)
	Wishlist(context.Context, *WishlistRequest) (*WishlistResponse, error)
	AvailableCoupons(context.Context, *AvailableCouponsRequest) (*AvailableCouponsResponse, error)
	ApplyCoupon(context.Context, *ApplyCouponRequest) (*ApplyCouponResponse, error)
	OfferCheck(context.Context, *OfferCheckRequest) (*OfferCheckResponse, error)
	mustEmbedUnimplementedUserDashboardServer()
}

// UnimplementedUserDashboardServer must be embedded to have forward compatible implementations.
type UnimplementedUserDashboardServer struct {
}

func (UnimplementedUserDashboardServer) MyMethod(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyMethod not implemented")
}
func (UnimplementedUserDashboardServer) Home(context.Context, *HomeRequest) (*HomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Home not implemented")
}
func (UnimplementedUserDashboardServer) AddAddress(context.Context, *AddAddressRequest) (*AddAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAddress not implemented")
}
func (UnimplementedUserDashboardServer) UserDetails(context.Context, *UserDetailsRequset) (*UserDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDetails not implemented")
}
func (UnimplementedUserDashboardServer) Apparels(context.Context, *ApparelsRequest) (*ApparelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apparels not implemented")
}
func (UnimplementedUserDashboardServer) ApparelDetails(context.Context, *ApparelDetailsRequest) (*ApparelDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApparelDetails not implemented")
}
func (UnimplementedUserDashboardServer) SearchApparels(context.Context, *SearchApparelsRequest) (*SearchApparelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchApparels not implemented")
}
func (UnimplementedUserDashboardServer) AddToCart(context.Context, *AddToCartRequest) (*AddToCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToCart not implemented")
}
func (UnimplementedUserDashboardServer) AddToWishList(context.Context, *AddToWishListRequest) (*AddToWishListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWishList not implemented")
}
func (UnimplementedUserDashboardServer) Cart(context.Context, *CartRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cart not implemented")
}
func (UnimplementedUserDashboardServer) CartList(context.Context, *CartListRequest) (*CartListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CartList not implemented")
}
func (UnimplementedUserDashboardServer) RemoveFromCart(context.Context, *RemoveFromCartRequest) (*RemoveFromCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromCart not implemented")
}
func (UnimplementedUserDashboardServer) RemoveFromWishlist(context.Context, *RemoveFromWishlistRequest) (*RemoveFromWishlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromWishlist not implemented")
}
func (UnimplementedUserDashboardServer) Wishlist(context.Context, *WishlistRequest) (*WishlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Wishlist not implemented")
}
func (UnimplementedUserDashboardServer) AvailableCoupons(context.Context, *AvailableCouponsRequest) (*AvailableCouponsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvailableCoupons not implemented")
}
func (UnimplementedUserDashboardServer) ApplyCoupon(context.Context, *ApplyCouponRequest) (*ApplyCouponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyCoupon not implemented")
}
func (UnimplementedUserDashboardServer) OfferCheck(context.Context, *OfferCheckRequest) (*OfferCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfferCheck not implemented")
}
func (UnimplementedUserDashboardServer) mustEmbedUnimplementedUserDashboardServer() {}

// UnsafeUserDashboardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDashboardServer will
// result in compilation errors.
type UnsafeUserDashboardServer interface {
	mustEmbedUnimplementedUserDashboardServer()
}

func RegisterUserDashboardServer(s grpc.ServiceRegistrar, srv UserDashboardServer) {
	s.RegisterService(&UserDashboard_ServiceDesc, srv)
}

func _UserDashboard_MyMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).MyMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/MyMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).MyMethod(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_Home_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).Home(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/Home",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).Home(ctx, req.(*HomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_AddAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).AddAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/AddAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).AddAddress(ctx, req.(*AddAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_UserDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDetailsRequset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).UserDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/UserDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).UserDetails(ctx, req.(*UserDetailsRequset))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_Apparels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApparelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).Apparels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/Apparels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).Apparels(ctx, req.(*ApparelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_ApparelDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApparelDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).ApparelDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/ApparelDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).ApparelDetails(ctx, req.(*ApparelDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_SearchApparels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchApparelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).SearchApparels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/SearchApparels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).SearchApparels(ctx, req.(*SearchApparelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_AddToCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).AddToCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/AddToCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).AddToCart(ctx, req.(*AddToCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_AddToWishList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToWishListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).AddToWishList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/AddToWishList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).AddToWishList(ctx, req.(*AddToWishListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_Cart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).Cart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/Cart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).Cart(ctx, req.(*CartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_CartList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).CartList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/CartList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).CartList(ctx, req.(*CartListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_RemoveFromCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).RemoveFromCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/RemoveFromCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).RemoveFromCart(ctx, req.(*RemoveFromCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_RemoveFromWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromWishlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).RemoveFromWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/RemoveFromWishlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).RemoveFromWishlist(ctx, req.(*RemoveFromWishlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_Wishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WishlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).Wishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/Wishlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).Wishlist(ctx, req.(*WishlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_AvailableCoupons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailableCouponsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).AvailableCoupons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/AvailableCoupons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).AvailableCoupons(ctx, req.(*AvailableCouponsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_ApplyCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).ApplyCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/ApplyCoupon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).ApplyCoupon(ctx, req.(*ApplyCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_OfferCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfferCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).OfferCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserDashboard/OfferCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).OfferCheck(ctx, req.(*OfferCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserDashboard_ServiceDesc is the grpc.ServiceDesc for UserDashboard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserDashboard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserDashboard",
	HandlerType: (*UserDashboardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MyMethod",
			Handler:    _UserDashboard_MyMethod_Handler,
		},
		{
			MethodName: "Home",
			Handler:    _UserDashboard_Home_Handler,
		},
		{
			MethodName: "AddAddress",
			Handler:    _UserDashboard_AddAddress_Handler,
		},
		{
			MethodName: "UserDetails",
			Handler:    _UserDashboard_UserDetails_Handler,
		},
		{
			MethodName: "Apparels",
			Handler:    _UserDashboard_Apparels_Handler,
		},
		{
			MethodName: "ApparelDetails",
			Handler:    _UserDashboard_ApparelDetails_Handler,
		},
		{
			MethodName: "SearchApparels",
			Handler:    _UserDashboard_SearchApparels_Handler,
		},
		{
			MethodName: "AddToCart",
			Handler:    _UserDashboard_AddToCart_Handler,
		},
		{
			MethodName: "AddToWishList",
			Handler:    _UserDashboard_AddToWishList_Handler,
		},
		{
			MethodName: "Cart",
			Handler:    _UserDashboard_Cart_Handler,
		},
		{
			MethodName: "CartList",
			Handler:    _UserDashboard_CartList_Handler,
		},
		{
			MethodName: "RemoveFromCart",
			Handler:    _UserDashboard_RemoveFromCart_Handler,
		},
		{
			MethodName: "RemoveFromWishlist",
			Handler:    _UserDashboard_RemoveFromWishlist_Handler,
		},
		{
			MethodName: "Wishlist",
			Handler:    _UserDashboard_Wishlist_Handler,
		},
		{
			MethodName: "AvailableCoupons",
			Handler:    _UserDashboard_AvailableCoupons_Handler,
		},
		{
			MethodName: "ApplyCoupon",
			Handler:    _UserDashboard_ApplyCoupon_Handler,
		},
		{
			MethodName: "OfferCheck",
			Handler:    _UserDashboard_OfferCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/service.proto",
}
